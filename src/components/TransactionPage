/*/import { Cluster, clusterApiUrl, Connection, PublicKey } from '@solana/web3.js';
import { encodeURL, createQR } from '@solana/pay';
import BigNumber from 'bignumber.js';

async function main() {
  // Variable to keep state of the payment status
  let paymentStatus: string;

  // Connecting to devnet for this example
  console.log('1. ✅ Establish connection to the network');
  const connection = new Connection(clusterApiUrl('devnet'), 'confirmed');
}

// -- snippet -- //

/**
 * Simulate a checkout experience
 *
 * Recommendation:
 * `amount` and `reference` should be created in a trusted environment (server).
 * The `reference` should be unique to a single customer session,
 * and will be used to find and validate the payment in the future.
 *
 *//*
console.log('2. 🛍 Simulate a customer checkout \n');
const recipient = new PublicKey('MERCHANT_WALLET');
const amount = new BigNumber(20);
const reference = new Keypair().publicKey;
const label = 'Jungle Cats store';
const message = 'Jungle Cats store - your order - #001234';
const memo = 'JC#4098';

/**
 * Create a payment request link
 *
 * Solana Pay uses a standard URL scheme across wallets for native SOL and SPL Token payments.
 * Several parameters are encoded within the link representing an intent to collect payment from a customer.
 *//*console.log('3. 💰 Create a payment request link \n');
const url = encodeURL({ recipient, amount, reference, label, message, memo });

// -- snippet -- //

/**
 * Create a payment request link
 *
 * Solana Pay uses a standard URL scheme across wallets for native SOL and SPL Token payments.
 * Several parameters are encoded within the link representing an intent to collect payment from a customer.
 */
/*/console.log('3. 💰 Create a payment request link \n');
const url = encodeURL({ recipient, amount, reference, label, message, memo });

// encode URL in QR code
const qrCode = createQR(url);
/*/



/*  import React, { useState } from "react";
import { useWallet } from "@solana/wallet-adapter-react";
import { Connection, SystemProgram, Transaction, sendAndConfirmTransaction } from "@solana/web3.js";

function TransactionPage() {
  const wallet = useWallet();
  const [recipient, setRecipient] = useState("");
  const [amount, setAmount] = useState(0);
  const [recentTransactions, setRecentTransactions] = useState([]);

  const handleSend = async () => {
    const connection = new Connection("https://api.mainnet-beta.solana.com");

    // Create and sign transaction
    const transaction = new Transaction().add(
      SystemProgram.transfer({
        fromPubkey: wallet.publicKey,
        toPubkey: recipient,
        lamports: amount,
      })
    );
    transaction.feePayer = wallet.publicKey;

    try {
      // Send transaction to the network
      const txid = await sendAndConfirmTransaction(connection, transaction, [wallet.signer]);
      console.log(`Transaction ${txid} sent!`);
      setRecentTransactions([...recentTransactions, txid]); // Update list of recent transactions
    } catch (error) {
      console.error(error);
    }
  };

  return (
    <div>
      <h1>Transacciones</h1>
      <form onSubmit={(e) => e.preventDefault()}>
        <label>
          Destinatario:
          <input type="text" value={recipient} onChange={(e) => setRecipient(e.target.value)} />
        </label>
        <br />
        <label>
          Cantidad:
          <input type="number" value={amount} onChange={(e) => setAmount(e.target.value)} />
        </label>
        <br />
        <button onClick={handleSend}>Enviar USDC</button>
      </form>
      <h2>Transacciones Recientes</h2>
      <ul>
        {recentTransactions.map((txid) => (
          <li key={txid}>{txid}</li>
        ))}
      </ul>
    </div>
  );
}

export default TransactionPage;
*/